# -*- coding: utf-8 -*-
# Generated by Django 1.11.5 on 2017-09-28 08:18
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import mptt.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Country',
            fields=[
                ('iso', models.CharField(max_length=2, primary_key=True, serialize=False, verbose_name='ISO')),
                ('name', models.CharField(max_length=128, verbose_name='Name')),
            ],
            options={
                'db_table': 'country',
                'verbose_name_plural': 'Countries',
                'verbose_name': 'Country',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Legislation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language', models.CharField(choices=[('en', 'English'), ('sq', 'Albanian'), ('hy', 'Armenian'), ('az-az', 'Azeri'), ('be-by', 'Belarusian'), ('bs-ba', 'Bosnian'), ('bg', 'Bulgaria'), ('ca', 'Catalan'), ('hr-hr', 'Croatian'), ('cs', 'Czech'), ('da-dk', 'Danish'), ('nl', 'Dutch'), ('et', 'Estonian'), ('fi', 'Finnish'), ('fr', 'French'), ('ka', 'Georgian'), ('de-lu', 'German'), ('el-gr', 'Greek'), ('hu', 'Hungarian'), ('is', 'Icelandic'), ('it-ch', 'Italian'), ('it-it', 'Italian'), ('kk', 'Kazakh'), ('ky', 'Kyrgyz'), ('lv', 'Latvian'), ('lt', 'Lithuanian'), ('mk', 'Macedonian'), ('mt', 'Maltese'), ('md', 'Moldavian'), ('sr', 'Montenegrin'), ('no', 'Norwegian'), ('pl', 'Polish'), ('pt-pt', 'Portuguese'), ('ro', 'Romanian'), ('ru', 'Russian'), ('se-se', 'Sami'), ('sr', 'Serbian'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('es-es', 'Spanish'), ('tg', 'Tajik'), ('tr', 'Turkish'), ('tk', 'Turkmen'), ('uk', 'Ukrainian'), ('uz', 'Uzbek')], default=('en', 'English'), max_length=64)),
                ('law_type', models.CharField(choices=[('Constitution', 'Constitution'), ('Legislation', 'Legislation'), ('Miscellaneous', 'Miscellaneous'), ('Regulation', 'Regulation'), ('Unknown', 'Unknown')], default=('Constitution', 'Constitution'), max_length=64)),
                ('year', models.IntegerField(default=2017)),
                ('year_mention', models.CharField(blank=True, max_length=1024, null=True)),
                ('pdf_file', models.FileField(null=True, upload_to='')),
                ('pdf_file_name', models.CharField(max_length=256, null=True)),
                ('title', models.CharField(max_length=256)),
                ('abstract', models.CharField(max_length=1024)),
            ],
        ),
        migrations.CreateModel(
            name='LegislationArticle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=65535)),
                ('legislation_page', models.IntegerField()),
                ('code', models.CharField(max_length=64)),
            ],
        ),
        migrations.CreateModel(
            name='LegislationPage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('page_text', models.CharField(max_length=65535)),
                ('page_number', models.IntegerField()),
                ('legislation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='page', to='lcc.Legislation')),
            ],
        ),
        migrations.CreateModel(
            name='TaxonomyClassification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('code', models.CharField(blank=True, max_length=16, unique=True)),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(db_index=True, editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='lcc.TaxonomyClassification')),
            ],
            options={
                'verbose_name_plural': 'Taxonomy Classifications',
                'verbose_name': 'Taxonomy Classification',
                'ordering': ('code',),
            },
        ),
        migrations.CreateModel(
            name='TaxonomyTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='TaxonomyTagGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('countries', models.ManyToManyField(to='lcc.Country')),
            ],
        ),
        migrations.CreateModel(
            name='UserRole',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
            ],
        ),
        migrations.AddField(
            model_name='userprofile',
            name='current_role',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='current_role', to='lcc.UserRole'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='home_country',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='home_country', to='lcc.Country'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='roles',
            field=models.ManyToManyField(to='lcc.UserRole'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='taxonomytag',
            name='group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tags', to='lcc.TaxonomyTagGroup'),
        ),
        migrations.AddField(
            model_name='legislationarticle',
            name='classifications',
            field=models.ManyToManyField(to='lcc.TaxonomyClassification'),
        ),
        migrations.AddField(
            model_name='legislationarticle',
            name='legislation',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='articles', to='lcc.Legislation'),
        ),
        migrations.AddField(
            model_name='legislationarticle',
            name='tags',
            field=models.ManyToManyField(to='lcc.TaxonomyTag'),
        ),
        migrations.AddField(
            model_name='legislation',
            name='classifications',
            field=models.ManyToManyField(to='lcc.TaxonomyClassification'),
        ),
        migrations.AddField(
            model_name='legislation',
            name='country',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lcc.Country'),
        ),
        migrations.AddField(
            model_name='legislation',
            name='tags',
            field=models.ManyToManyField(to='lcc.TaxonomyTag'),
        ),
    ]
